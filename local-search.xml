<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自顶向下学习Binder通信——BinderProxy创建</title>
    <link href="/2022/04/03/Hello%20World/"/>
    <url>/2022/04/03/Hello%20World/</url>
    
    <content type="html"><![CDATA[<p>本文更适合对Binder通信机制有一定了解的开发人员阅读。<br>AIDL通信的一般流程：</p><ol><li>使用AMS的bindService绑定Service</li><li>在ServiceConnection的onServiceConnected的回调中使用IXxxx.Stub.asInterface()保存返回的IBinder类型对象</li><li>使用步骤2中保存的对象进行方法的调用<br>其中步骤2中返回的IBinder类型对象就是<code>BinderProxy</code>对象，本文介绍一下BinderProxy对象的创建过程<h2 id="ActivityThread的handleBindService方法"><a href="#ActivityThread的handleBindService方法" class="headerlink" title="ActivityThread的handleBindService方法"></a>ActivityThread的handleBindService方法</h2>在Client调用<code>bindService</code>方法后，最终会走到ActivityThread的<code>handleBindService</code>中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBindService</span><span class="hljs-params">(BindServiceData data)</span> &#123;<br>         ...<br>         <span class="hljs-comment">//省略不关心的代码逻辑</span><br>         <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> s.onBind(data.intent);<br>        ActivityManager.getService().publishService(data.token, data.intent, binder);<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述函数做了两个动作：</p><ol><li><p>回调Service的<code>OnBind</code>方法（首次绑定) </p></li><li><p>调用AMS的<code>publishService</code>方法。<br> Service的<code>onBind</code>方法返回的是自定义的ServiceImpl对象，而且查阅<code>publishService</code>的代码逻辑也没有任何地方创建<code>BinderProxy</code>，所以<code>BinderProxy</code>不是上述两个函数中创建的。那么<code>BinderProxy</code>对象是何时创建的呢？<br> 其实，最关键的是<strong>ActivityManager.getService().publishService，它并不是直接调用的ActivityManagerService的publishService方法，不能直接去ActivityManagerService的源码里查看用逻辑</strong>，它本身就是一个Binder调用。</p></li></ol><h2 id="IActivityManager-java"><a href="#IActivityManager-java" class="headerlink" title="IActivityManager.java"></a>IActivityManager.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> android.app;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IActivityManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">android</span>.os.IInterface &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">android</span>.os.Binder <span class="hljs-keyword">implements</span> <span class="hljs-title class_">android</span>.app.IActivityManager &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTransact</span><span class="hljs-params">(<span class="hljs-type">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="hljs-type">int</span> flags)</span> <span class="hljs-keyword">throws</span> android.os.RemoteException &#123;<br>            ...<br>            <span class="hljs-keyword">case</span> TRANSACTION_publishService:<br>                _arg2 = android.app.IActivityManager.Stub.asInterface(data.readStrongBinder());<br>                ...<br>               <span class="hljs-built_in">this</span>.publishService(_arg0, _arg1, _arg2);<br>                ...<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">android</span>.app.IActivityManager &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishService</span><span class="hljs-params">(android.os.IBinder token, android.content.Intent intent, android.os.IBinder service)</span> <span class="hljs-keyword">throws</span> android.os.RemoteException &#123;<br>                android.os.<span class="hljs-type">Parcel</span> <span class="hljs-variable">_data</span> <span class="hljs-operator">=</span> android.os.Parcel.obtain();<br>                android.os.<span class="hljs-type">Parcel</span> <span class="hljs-variable">_reply</span> <span class="hljs-operator">=</span> android.os.Parcel.obtain();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ...<br>                    _data.writeStrongBinder((service != <span class="hljs-literal">null</span>) ? (service.asBinder() : (<span class="hljs-literal">null</span>)));<br>                    mRemote.transact(code, _data, _reply, <span class="hljs-number">0</span>);<br>                    ...<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishService</span><span class="hljs-params">(android.os.IBinder token, android.content.Intent intent, android.os.IBinder service)</span> <span class="hljs-keyword">throws</span> android.os.RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是根据IActivityManager.aidl文件，手动编写的IActivityManager.java文件，可能有真正的文件有一定的出入，但是关键步骤上的代码逻辑应该是没问题的。<br>从上面的代码中可以看到当调用<code>publishService</code>方法后，传入的IBinder类的service对象会被Parcel.java的<code>writeStrongBinder</code>方法进行转换</p><h2 id="Java层Parcel的writeStrongBinder"><a href="#Java层Parcel的writeStrongBinder" class="headerlink" title="Java层Parcel的writeStrongBinder"></a>Java层Parcel的writeStrongBinder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeStrongBinder</span><span class="hljs-params">(IBinder val)</span> &#123;<br>       nativeWriteStrongBinder(mNativePtr, val);<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nativeWriteStrongBinder</span><span class="hljs-params">(<span class="hljs-type">long</span> nativePtr, IBinder val)</span>;<br></code></pre></td></tr></table></figure><p><code>writeStrongBinder</code>方法会调用native方法<code>nativeWriteStrongBinder</code></p><h3 id="Native方法的映射关系"><a href="#Native方法的映射关系" class="headerlink" title="Native方法的映射关系"></a>Native方法的映射关系</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gParcelMethods[] = &#123;<br>...<br>&#123;<span class="hljs-string">&quot;nativeWriteStrongBinder&quot;</span>,   <span class="hljs-string">&quot;(JLandroid/os/IBinder;)V&quot;</span>, (<span class="hljs-type">void</span>*)android_os_Parcel_writeStrongBinder&#125;,<br>...<br>            &#123;<span class="hljs-string">&quot;nativeReadStrongBinder&quot;</span>,    <span class="hljs-string">&quot;(J)Landroid/os/IBinder;&quot;</span>, (<span class="hljs-type">void</span>*)android_os_Parcel_readStrongBinder&#125;,<br>       ...<br>&#125;<br></code></pre></td></tr></table></figure><p>JNI方法的注册在Zygote进程启动是已经完成了，调用顺序如下：AndroidRuntime.start-&gt;AndroidRuntime.startReg-&gt;AndroidRuntime.register_jni_procs。感兴趣的可以细看，这里先按下不表</p><h3 id="Native层Parcel的android-os-Parcel-writeStrongBinder"><a href="#Native层Parcel的android-os-Parcel-writeStrongBinder" class="headerlink" title="Native层Parcel的android_os_Parcel_writeStrongBinder"></a>Native层Parcel的android_os_Parcel_writeStrongBinder</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">android_os_Parcel_writeStrongBinder</span><span class="hljs-params">(JNIEnv* env, jclass clazz, jlong nativePtr, jobject object)</span></span><br><span class="hljs-function"></span>&#123;<br>    Parcel* parcel = <span class="hljs-built_in">reinterpret_cast</span>&lt;Parcel*&gt;(nativePtr);<br>    <span class="hljs-keyword">if</span> (parcel != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">//关键在ibinderForJavaObject方法</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">status_t</span> err = parcel-&gt;<span class="hljs-built_in">writeStrongBinder</span>(<span class="hljs-built_in">ibinderForJavaObject</span>(env, object));<br>        <span class="hljs-keyword">if</span> (err != NO_ERROR) &#123;<br>            <span class="hljs-built_in">signalExceptionForError</span>(env, clazz, err);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Native层Binder的ibinderForJavaObject"><a href="#Native层Binder的ibinderForJavaObject" class="headerlink" title="Native层Binder的ibinderForJavaObject"></a>Native层Binder的ibinderForJavaObject</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">sp&lt;IBinder&gt; <span class="hljs-title">ibinderForJavaObject</span><span class="hljs-params">(JNIEnv* env, jobject obj)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// Instance of Binder?</span><br>    <span class="hljs-comment">// 判断是否是Binder对象吗？</span><br>    <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">IsInstanceOf</span>(obj, gBinderOffsets.mClass)) &#123;<br>        JavaBBinderHolder* jbh = (JavaBBinderHolder*)<br>            env-&gt;<span class="hljs-built_in">GetLongField</span>(obj, gBinderOffsets.mObject);<br>        <span class="hljs-keyword">return</span> jbh-&gt;<span class="hljs-built_in">get</span>(env, obj);<br>    &#125;<br>    <span class="hljs-comment">// Instance of BinderProxy?</span><br>    <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">IsInstanceOf</span>(obj, gBinderProxyOffsets.mClass)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getBPNativeData</span>(env, obj)-&gt;mObject;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从注释来看，会判断传入的参数是<code>Binder</code>对象还是<code>BinderProxy</code>对象。obj对象是我们自定义的类，一般继承了Ixxx.Stub类，而Stub类继承了Binder类，所以obj是Binder对象。但是这个gBinderOffsets.mClass代表啥？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> kBinderPathName = <span class="hljs-string">&quot;android/os/Binder&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">int_register_android_os_Binder</span><span class="hljs-params">(JNIEnv* env)</span></span><br><span class="hljs-function"></span>&#123;<br>    jclass clazz = <span class="hljs-built_in">FindClassOrDie</span>(env, kBinderPathName);<br>   <span class="hljs-comment">// mClass指向的确实是android.os.Binder对象</span><br>    gBinderOffsets.mClass = <span class="hljs-built_in">MakeGlobalRefOrDie</span>(env, clazz);<br>    gBinderOffsets.mExecTransact = <span class="hljs-built_in">GetMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;execTransact&quot;</span>, <span class="hljs-string">&quot;(IJJI)Z&quot;</span>);<br>    gBinderOffsets.mGetInterfaceDescriptor = <span class="hljs-built_in">GetMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;getInterfaceDescriptor&quot;</span>,<br>        <span class="hljs-string">&quot;()Ljava/lang/String;&quot;</span>);<br>    gBinderOffsets.mObject = <span class="hljs-built_in">GetFieldIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;mObject&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">RegisterMethodsOrDie</span>(<br>        env, kBinderPathName,<br>        gBinderMethods, <span class="hljs-built_in">NELEM</span>(gBinderMethods));<br>&#125;<br></code></pre></td></tr></table></figure><p>mClass确实指向的是Java层的<code>Binder</code>对象,那么代码会走一个逻辑分支， JavaBBinderHolder* jbh = (JavaBBinderHolder*) env-&gt;GetLongField(obj, gBinderOffsets.mObject),讲Binder对象的mObject强转为<code>JavaBBinderHolder</code>对象，那么Java层Binder的mObject是<code>JavaBBinderHolder</code>对象吗？</p><h4 id="Java层Binder的构造方法"><a href="#Java层Binder的构造方法" class="headerlink" title="Java层Binder的构造方法"></a>Java层Binder的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Binder</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String descriptor)</span> &#123;<br>       mObject = getNativeBBinderHolder();<br>       ...<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getNativeBBinderHolder</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>在Service的onBind中需要返回自定义ServiceImpl对象，此时会调用父类的构造方法，一直调用到Binder的构造方法中，从上述的代码逻辑可以看出Binder的mObject指向的是native方法<code>getNativeBBinderHolder</code>的返回值</p><h4 id="Binder的android-os-Binder-getNativeBBinderHolder"><a href="#Binder的android-os-Binder-getNativeBBinderHolder" class="headerlink" title="Binder的android_os_Binder_getNativeBBinderHolder"></a>Binder的android_os_Binder_getNativeBBinderHolder</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> jlong <span class="hljs-title">android_os_Binder_getNativeBBinderHolder</span><span class="hljs-params">(JNIEnv* env, jobject clazz)</span></span><br><span class="hljs-function"></span>&#123;<br>    JavaBBinderHolder* jbh = <span class="hljs-keyword">new</span> <span class="hljs-built_in">JavaBBinderHolder</span>();<br>    <span class="hljs-keyword">return</span> (jlong) jbh;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的逻辑可以看出，mObject确实指向的是JavaBBinderHolder对象。</p><h3 id="JavaBBinderHolder的get"><a href="#JavaBBinderHolder的get" class="headerlink" title="JavaBBinderHolder的get"></a>JavaBBinderHolder的get</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">sp&lt;JavaBBinder&gt; <span class="hljs-title">get</span><span class="hljs-params">(JNIEnv* env, jobject obj)</span></span><br><span class="hljs-function"> </span>&#123;<br>     AutoMutex _l(mLock);<br>     sp&lt;JavaBBinder&gt; b = mBinder.<span class="hljs-built_in">promote</span>();<br>     <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">NULL</span>) &#123;<br>         b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">JavaBBinder</span>(env, obj);<br>         ...<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> b;<br> &#125;<br></code></pre></td></tr></table></figure><p>从上面可以看出来，JavaBBinderHolder的get方法返回的是跟<strong>JavaBBinder</strong>对象相关的对象。</p><p>从目前来看，<code>BinderProxy</code>对象还是未创建。从调用<code>publishService</code>到与binder驱动这块的逻辑中不涉及<code>BinderProxy</code>对象的创建。在将数据写到binder驱动的内核内存地址后,binder驱动会唤醒目标进程,然后经过一些列的函数调用最终调用到我们IActivityManager.java的<code>onTransact</code>方法中(binder驱动交互的整个流程太长，这里先按下不表)，然后调用<code>data.readStrongBinder</code>方法</p><h2 id="Java层Parcel的readStrongBinder"><a href="#Java层Parcel的readStrongBinder" class="headerlink" title="Java层Parcel的readStrongBinder"></a>Java层Parcel的readStrongBinder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> IBinder <span class="hljs-title function_">readStrongBinder</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> nativeReadStrongBinder(mNativePtr);<br>     ...<br>     <span class="hljs-keyword">return</span> result;<br> &#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> IBinder <span class="hljs-title function_">nativeReadStrongBinder</span><span class="hljs-params">(<span class="hljs-type">long</span> nativePtr)</span>;<br></code></pre></td></tr></table></figure><h3 id="Native层Parcel的android-os-Parcel-readStrongBinder"><a href="#Native层Parcel的android-os-Parcel-readStrongBinder" class="headerlink" title="Native层Parcel的android_os_Parcel_readStrongBinder"></a>Native层Parcel的android_os_Parcel_readStrongBinder</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> jobject <span class="hljs-title">android_os_Parcel_readStrongBinder</span><span class="hljs-params">(JNIEnv* env, jclass clazz, jlong nativePtr)</span></span><br><span class="hljs-function"></span>&#123;<br>    Parcel* parcel = <span class="hljs-built_in">reinterpret_cast</span>&lt;Parcel*&gt;(nativePtr);<br>    <span class="hljs-keyword">if</span> (parcel != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">javaObjectForIBinder</span>(env, parcel-&gt;<span class="hljs-built_in">readStrongBinder</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Native层Binder的javaObjectForIBinder"><a href="#Native层Binder的javaObjectForIBinder" class="headerlink" title="Native层Binder的javaObjectForIBinder"></a>Native层Binder的javaObjectForIBinder</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">jobject <span class="hljs-title">javaObjectForIBinder</span><span class="hljs-params">(JNIEnv* env, <span class="hljs-type">const</span> sp&lt;IBinder&gt;&amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinderProxyNativeData* nativeData = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinderProxyNativeData</span>();<br>    nativeData-&gt;mOrgue = <span class="hljs-keyword">new</span> DeathRecipientList;<br>    nativeData-&gt;mObject = val;<br>    ...<br>    jobject object = env-&gt;<span class="hljs-built_in">CallStaticObjectMethod</span>(gBinderProxyOffsets.mClass,<br>            gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.<span class="hljs-built_in">get</span>());<br>    ...<br>   <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="int-register-android-os-BinderProxy"><a href="#int-register-android-os-BinderProxy" class="headerlink" title="int_register_android_os_BinderProxy"></a>int_register_android_os_BinderProxy</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> kBinderProxyPathName = <span class="hljs-string">&quot;android/os/BinderProxy&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">int_register_android_os_BinderProxy</span><span class="hljs-params">(JNIEnv* env)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    jclass clazz = <span class="hljs-built_in">FindClassOrDie</span>(env, kBinderProxyPathName);<br>    gBinderProxyOffsets.mClass = <span class="hljs-built_in">MakeGlobalRefOrDie</span>(env, clazz);<br>    gBinderProxyOffsets.mGetInstance = <span class="hljs-built_in">GetStaticMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;getInstance&quot;</span>,<br>            <span class="hljs-string">&quot;(JJ)Landroid/os/BinderProxy;&quot;</span>);<br>    gBinderProxyOffsets.mSendDeathNotice =<br>            <span class="hljs-built_in">GetStaticMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;sendDeathNotice&quot;</span>,<br>                                   <span class="hljs-string">&quot;(Landroid/os/IBinder$DeathRecipient;Landroid/os/IBinder;)V&quot;</span>);<br>    gBinderProxyOffsets.mNativeData = <span class="hljs-built_in">GetFieldIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;mNativeData&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>);<br>   ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">RegisterMethodsOrDie</span>(<br>        env, kBinderProxyPathName,<br>        gBinderProxyMethods, <span class="hljs-built_in">NELEM</span>(gBinderProxyMethods));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以<code>javaObjectForIBinder</code>最终会调用Java层<code>BinderProxy</code>的<code>getInstance</code>方法</p><h2 id="BinderProxy的getInstance"><a href="#BinderProxy的getInstance" class="headerlink" title="BinderProxy的getInstance"></a>BinderProxy的getInstance</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BinderProxy <span class="hljs-title function_">getInstance</span><span class="hljs-params">(<span class="hljs-type">long</span> nativeData, <span class="hljs-type">long</span> iBinder)</span> &#123;<br>    BinderProxy result;<br>    <span class="hljs-keyword">synchronized</span> (sProxyMap) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = sProxyMap.get(iBinder);<br>            <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinderProxy</span>(nativeData);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>     ...<br>        &#125;<br>        NoImagePreloadHolder.sRegistry.registerNativeAllocation(result, nativeData);<br>        sProxyMap.set(iBinder, result);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>至此，<code>BinderProxy</code>对象才被真正创建出来,然后回调到AMS的publishService方法中，最终回调给调用方ServiceConnection的<code>onServiceConnected</code>方法。</p><p>简而言之，BinderProxy对象的创建是在<code>readStrongBinder</code>的方法中创建的。最后我们看一下整个过程的函数调用关系<br><img src="/2022/04/03/Hello%20World/BinderProxy%E5%88%9B%E5%BB%BA.png" alt="BinderProxy创建"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
