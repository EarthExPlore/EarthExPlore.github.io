<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自顶向下学习Binder通信——Binder线程池的启动流程</title>
    <link href="/2022/04/17/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E5%AD%A6%E4%B9%A0Binder%E9%80%9A%E4%BF%A1-Binder%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/04/17/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E5%AD%A6%E4%B9%A0Binder%E9%80%9A%E4%BF%A1-Binder%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Binder线程池的启动流程"><a href="#Binder线程池的启动流程" class="headerlink" title="Binder线程池的启动流程"></a>Binder线程池的启动流程</h1><h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><p>当我们使用AMS的<code>bindService</code>函数绑定远端Service时，如果Servic所属的进程还未创建，那么系统会先通过Zygote进程创建该进程。进程创建完成后，我们会接收到<strong>ServiceConnection</strong>的<code>onServiceConnected</code>方法的回调。通过<code>onServiceConnected</code>返回的<strong>BinderPrxoy</strong>对象，我们就可以跟远端的Service进行Binder通信了。显而易见，Server端进程能跟Client端进程进行Binder通信的前提，就是双端进程的Binder线程池已经创建完毕。而<strong>进程Binder线程池的启动就是在进程创建时完成</strong>的。</p><h2 id="二、具体流程"><a href="#二、具体流程" class="headerlink" title="二、具体流程"></a>二、具体流程</h2><p>当我们使用AMS的<code>bindService</code>去绑定远端Service或者使用AMS的<code>startActivity</code>启动远端Activity时，如果Server端进程未启动，系统会先启动Server端进程。这里，我们以<code>bindService</code>为起点跟踪进程Binder线程池的启动过程</p><h3 id="2-1-AMS的bindService"><a href="#2-1-AMS的bindService" class="headerlink" title="2.1 AMS的bindService"></a>2.1 AMS的bindService</h3><p>Context.bindService接口最终会转交到AMS的<strong>bindIsolatedService</strong>进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs java">#ActivityManagerService.java<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bindIsolatedService</span><span class="hljs-params">(IApplicationThread caller, IBinder token, Intent service,</span><br><span class="hljs-params">            String resolvedType, IServiceConnection connection, <span class="hljs-type">int</span> flags, String instanceName,</span><br><span class="hljs-params">            String callingPackage, <span class="hljs-type">int</span> userId)</span> <span class="hljs-keyword">throws</span> TransactionTooLargeException &#123;<br>        ...<br>        <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">return</span> mServices.bindServiceLocked(caller, token, service, resolvedType, connection, flags,        instanceName, callingPackage, userId);<br>        &#125;<br>    &#125;<br><br>#ActiveServices.java<br><span class="hljs-type">int</span> <span class="hljs-title function_">bindServiceLocked</span><span class="hljs-params">(...)</span> &#123;<br>        ...<br>        <span class="hljs-comment">//搜索对应的service配置相关信息</span><br>        <span class="hljs-type">ServiceLookupResult</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> retrieveServiceLocked(...);<br>            ...<br>            <span class="hljs-keyword">if</span> ((flags&amp;Context.BIND_AUTO_CREATE) != <span class="hljs-number">0</span>) &#123;<br>            ...<br>                <span class="hljs-keyword">if</span> (bringUpServiceLocked(..) != <span class="hljs-literal">null</span>) &#123;<br>                ...<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        ...<br>    &#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">bringUpServiceLocked</span><span class="hljs-params">(..)</span>  &#123;<br>         ...<br>        <span class="hljs-comment">// Not running -- get it started, and enqueue this service record</span><br>        <span class="hljs-comment">// to be executed when the app comes up.</span><br>        <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span> &amp;&amp; !permissionsReviewRequired &amp;&amp; !packageFrozen) &#123;<br>            ...<br>            <span class="hljs-comment">//这里mAm是ActiivtyManagerService对象</span><br>            <span class="hljs-keyword">if</span> ((app = mAm.startProcessLocked(procName, r.appInfo, <span class="hljs-literal">true</span>, intentFlags,<br>                        hostingRecord, ZYGOTE_POLICY_FLAG_EMPTY, <span class="hljs-literal">false</span>, isolated)) == <span class="hljs-literal">null</span>) &#123;<br>                ...<br>                bringDownServiceLocked(r, enqueueOomAdj);<br>                <span class="hljs-keyword">return</span> msg;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (isolated) &#123;<br>                r.isolatedProc = app;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>AMS的<code>bindIsolatedService</code>会调用到ActiveServices的<code>bindServiceLocked</code>方法,接着会调用<code>bringUpServiceLocked</code>尝试拉起服务，当判断Service所属的进程未启动时，将使用AMS的<code>startProcessLocked</code>方法创建Server端进程</p><h3 id="2-2-startProcessLocked"><a href="#2-2-startProcessLocked" class="headerlink" title="2.2 startProcessLocked"></a>2.2 startProcessLocked</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">#ActivityManagerService.java<br><span class="hljs-keyword">final</span> ProcessRecord <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(...)</span> &#123;<br>        <span class="hljs-keyword">return</span> mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags,<br>                hostingRecord, zygotePolicyFlags, allowWhileBooting, isolated, <span class="hljs-number">0</span> <span class="hljs-comment">/* isolatedUid */</span>,<br>                <span class="hljs-literal">null</span> <span class="hljs-comment">/* ABI override */</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/* entryPoint */</span>,<br>                <span class="hljs-literal">null</span> <span class="hljs-comment">/* entryPointArgs */</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/* crashHandler);</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">#ProcessList.java<br>ProcessRecord <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(String processName, ApplicationInfo info,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> knownToBeDead, <span class="hljs-type">int</span> intentFlags, HostingRecord hostingRecord,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> zygotePolicyFlags, <span class="hljs-type">boolean</span> allowWhileBooting, <span class="hljs-type">boolean</span> isolated, <span class="hljs-type">int</span> isolatedUid,</span><br><span class="hljs-params">            String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler)</span> &#123;<br>  ...<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span><br>                startProcessLocked(app, hostingRecord, zygotePolicyFlags, abiOverride);<br>        checkSlow(startTime, <span class="hljs-string">&quot;startProcess: done starting proc!&quot;</span>);<br>        <span class="hljs-keyword">return</span> success ? app : <span class="hljs-literal">null</span>;<br>     <span class="hljs-type">boolean</span> <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(ProcessRecord app, HostingRecord hostingRecord,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> zygotePolicyFlags, String abiOverride)</span> &#123;<br>        <span class="hljs-keyword">return</span> startProcessLocked(app, hostingRecord, zygotePolicyFlags,<br>                <span class="hljs-literal">false</span> <span class="hljs-comment">/* disableHiddenApiChecks */</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/* disableTestApiChecks */</span>,<br>                abiOverride);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在<strong>ProcessList</strong>类中有很多<code>startProcessLocked</code>的函数重载，这里就不一一展示了（感兴趣的可以自己跟踪源码），总之最终会调用到<strong>Process.start</strong>函数中。</p><h3 id="2-3-进程的创建"><a href="#2-3-进程的创建" class="headerlink" title="2.3 进程的创建"></a>2.3 进程的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">#Process.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProcessStartResult <span class="hljs-title function_">start</span><span class="hljs-params">(...)</span> &#123;<br>        <span class="hljs-keyword">return</span> ZYGOTE_PROCESS.start(...);<br>    &#125;<br><br>#ZygoteProcess.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Process.ProcessStartResult <span class="hljs-title function_">start</span><span class="hljs-params">(...)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> startViaZygote(...);<br>        &#125; <span class="hljs-keyword">catch</span> (ZygoteStartFailedEx ex) &#123;<br>            ...<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">private</span> Process.ProcessStartResult <span class="hljs-title function_">startViaZygote</span><span class="hljs-params">(...)</span><br>                                                      <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>        ArrayList&lt;String&gt; argsForZygote = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>...<br>        <span class="hljs-comment">//构建进程初始化参数</span><br>        argsForZygote.add(<span class="hljs-string">&quot;--runtime-args&quot;</span>);<br>        argsForZygote.add(<span class="hljs-string">&quot;--setuid=&quot;</span> + uid);<br>        argsForZygote.add(<span class="hljs-string">&quot;--setgid=&quot;</span> + gid);<br>        argsForZygote.add(<span class="hljs-string">&quot;--runtime-flags=&quot;</span> + runtimeFlags)；<br>        ...<br>        <span class="hljs-keyword">synchronized</span>(mLock) &#123;<br>            <span class="hljs-keyword">return</span> zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi),<br>                                              zygotePolicyFlags,<br>                                              argsForZygote);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Process最终会调用<strong>ZygoteProcess</strong>的<code>start</code>方法触发进程的创建。这里会使用Socket跟Zygote进程进行通信，发送进程创建的请求。</p><h4 id="2-3-1-Zygote进程的启动"><a href="#2-3-1-Zygote进程的启动" class="headerlink" title="2.3.1 Zygote进程的启动"></a>2.3.1 Zygote进程的启动</h4><p>这里简单介绍一下zygote进程的runSelectLoop方法。Android FWK启动是会先创建init进程，然后init进程会创建zygote进程，zygote进程的入口函数为<strong>ZygoteInit.java的main</strong>函数中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">#ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> &#123;<br>        <span class="hljs-type">ZygoteServer</span> <span class="hljs-variable">zygoteServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Runnable caller;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">startSystemServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">zygoteSocketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zygote&quot;</span>;<br>            <span class="hljs-comment">//Step 1</span><br>            zygoteServer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteServer</span>(isPrimaryZygote);<br>            <span class="hljs-keyword">if</span> (startSystemServer) &#123;<br>                <span class="hljs-comment">// Step 2</span><br>                <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);<br>                <span class="hljs-comment">// 这个逻辑分支在Zygote进程中不会执行，在systemServer中才会执行</span><br>                <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>                    r.run();<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//Step 3</span><br>            caller = zygoteServer.runSelectLoop(abiList);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>           ...<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (zygoteServer != <span class="hljs-literal">null</span>) &#123;<br>                zygoteServer.closeServerSocket();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// We&#x27;re in the child process and have exited the select loop. Proceed to execute the</span><br>        <span class="hljs-comment">// command.</span><br>        <span class="hljs-keyword">if</span> (caller != <span class="hljs-literal">null</span>) &#123;<br>            caller.run();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Zygote进程初始化会做三件事情：：</p><ol><li>创建本地Socket，内部使用的是<code>LocalServerSocket</code></li><li>使用fork()创建SystemServer进程，创建的详细过程这里先按下不表</li><li>调用<code>runSelectLoop</code>等待请求到来</li></ol><h4 id="2-3-2-ZygoteServer的runSelectLoop"><a href="#2-3-2-ZygoteServer的runSelectLoop" class="headerlink" title="2.3.2 ZygoteServer的runSelectLoop"></a>2.3.2 ZygoteServer的runSelectLoop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Runnable <span class="hljs-title function_">runSelectLoop</span><span class="hljs-params">(String abiList)</span> &#123;<br>...<br>       <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>           ...<br>           <span class="hljs-type">int</span> pollReturnValue;<br>           <span class="hljs-keyword">try</span> &#123;<br>               pollReturnValue = Os.poll(pollFDs, pollTimeoutMs);<br>           &#125; <span class="hljs-keyword">catch</span> (ErrnoException ex) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;poll failed&quot;</span>, ex);<br>           &#125;<br>           ...<br>           <span class="hljs-keyword">try</span> &#123;<br>             <span class="hljs-type">ZygoteConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> peers.get(pollIndex);<br>                           ...<br>             <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> connection.processCommand(<span class="hljs-built_in">this</span>, multipleForksOK);<br>             <span class="hljs-keyword">return</span> command;<br>         &#125; <br>   &#125;<br></code></pre></td></tr></table></figure><p><code>runSelectLoop</code>内部会使用while(true)+epoll时间模型来不停接受来自客户端的请求，当无客户端请求到来时，整个循环会等到在Os.poll函数上。当获取到Client的请求后，会调用<code>processCommand</code>来进行处理.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java">#ZygoteConnection.java<br>Runnable <span class="hljs-title function_">processCommand</span><span class="hljs-params">(ZygoteServer zygoteServer, <span class="hljs-type">boolean</span> multipleOK)</span> &#123;<br>...<br>                <span class="hljs-keyword">if</span> (parsedArgs.mInvokeWith != <span class="hljs-literal">null</span> || parsedArgs.mStartChildZygote<br>                        || !multipleOK || peer.getUid() != Process.SYSTEM_UID) &#123;<br>                    <span class="hljs-comment">// step 1</span><br>                    pid = Zygote.forkAndSpecialize(...);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                         <span class="hljs-comment">// step 2</span><br>                        <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>                             ...<br>    <span class="hljs-comment">//step 3</span><br>                            <span class="hljs-keyword">return</span> handleChildProc(parsedArgs, childPipeFd,<br>                                    parsedArgs.mStartChildZygote);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">// In the parent. A pid &lt; 0 indicates a failure and will be handled in</span><br>                            <span class="hljs-comment">// handleParentProc.</span><br>                            IoUtils.closeQuietly(childPipeFd);<br>                            childPipeFd = <span class="hljs-literal">null</span>;<br>                            handleParentProc(pid, serverPipeFd);<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        IoUtils.closeQuietly(childPipeFd);<br>                        IoUtils.closeQuietly(serverPipeFd);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                  ...<br>                &#125;<br>            &#125;<br>        &#125;<br>      ...<br>    &#125;<br><br>#Zygote.java<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">forkAndSpecialize</span><span class="hljs-params">(...)</span> &#123;<br>        ...<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> nativeForkAndSpecialize(<br>                uid, gid, gids, runtimeFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,<br>                fdsToIgnore, startChildZygote, instructionSet, appDataDir, isTopApp,<br>                pkgDataInfoList, allowlistedDataInfoList, bindMountAppDataDirs,<br>                bindMountAppStorageDirs);<br>...<br>        <span class="hljs-keyword">return</span> pid;<br>    &#125;<br>#Zygote.java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nativeForkAndSpecialize</span><span class="hljs-params">(<span class="hljs-type">int</span> uid, <span class="hljs-type">int</span> gid, <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> runtimeFlags, <span class="hljs-type">int</span>[][] rlimits, <span class="hljs-type">int</span> mountExternal, String seInfo, String niceName,</span><br><span class="hljs-params">            <span class="hljs-type">int</span>[] fdsToClose, <span class="hljs-type">int</span>[] fdsToIgnore, <span class="hljs-type">boolean</span> startChildZygote, String instructionSet,</span><br><span class="hljs-params">            String appDataDir, <span class="hljs-type">boolean</span> isTopApp, String[] pkgDataInfoList,</span><br><span class="hljs-params">            String[] allowlistedDataInfoList, <span class="hljs-type">boolean</span> bindMountAppDataDirs,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> bindMountAppStorageDirs)</span>;<br></code></pre></td></tr></table></figure><p>在创建进程的请求处理中，<code>processCommand</code> 中首先会调用native方法<code>nativeForkAndSpecialize</code>创建出子线程，os最终会使用fork()函数创建子进程。<strong>fork()函数在父进程的返回值为子进程的pid，而在子进程中返回0</strong>。所以子进程会调用<code>handleChildProc</code>对进程创建后的行为进行处理。我们先看进程创建后的处理逻辑</p><h4 id="2-3-3-进程创建后的handleChildProc"><a href="#2-3-3-进程创建后的handleChildProc" class="headerlink" title="2.3.3 进程创建后的handleChildProc"></a>2.3.3 进程创建后的handleChildProc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">#ZygoteConnection.java<br><span class="hljs-keyword">private</span> Runnable <span class="hljs-title function_">handleChildProc</span><span class="hljs-params">(ZygoteArguments parsedArgs,</span><br><span class="hljs-params">            FileDescriptor pipeFd, <span class="hljs-type">boolean</span> isZygote)</span> &#123;<br>            ...<br>            <span class="hljs-keyword">if</span> (!isZygote) &#123;<br>                <span class="hljs-keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,<br>                        parsedArgs.mDisabledCompatChanges,<br>                        parsedArgs.mRemainingArgs, <span class="hljs-literal">null</span> <span class="hljs-comment">/* classLoader */</span>);<br>            &#125;<br>          ...<br> &#125;<br><br>#ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">            String[] argv, ClassLoader classLoader)</span> &#123;<br>    ...<br>        ZygoteInit.nativeZygoteInit();<br>        <span class="hljs-keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,<br>                classLoader);<br> &#125;<br><br>#RuntimeInit.java<br> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">applicationInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">            String[] argv, ClassLoader classLoader)</span> &#123;<br>        ...<br>        <span class="hljs-keyword">return</span> findStaticMain(args.startClass, args.startArgs, classLoader);<br>&#125;<br><br>#RuntimeInit.java<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">findStaticMain</span><span class="hljs-params">(String className, String[] argv,</span><br><span class="hljs-params">            ClassLoader classLoader)</span> &#123;<br>        Class&lt;?&gt; cl;<br><span class="hljs-comment">//这里的class代表的是ActivityThread</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            cl = Class.forName(className, <span class="hljs-literal">true</span>, classLoader);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>           ...<br>        &#125;<br><br>        Method m;<br>        <span class="hljs-keyword">try</span> &#123;<br>            m = cl.getMethod(<span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String[].class &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>       ...<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodAndArgsCaller</span>(m, argv);<br>&#125;<br><br>#RuntimeInit.java<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodAndArgsCaller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        ...<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; mArgs &#125;);<br>            &#125; <br>            ...<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的函数调用可以看出在进程创建完成之后，会回调<strong>ZygoteInit的zygoteInit</strong>方法,最终通过反射调用<strong>ActivityThread的main</strong>方法。</p><p>简单总结一下进程的启动流程：</p><ol><li>系统启动时，会创建zygote进程，zygote在启动后会创建本地的Socket服务，然后调用<code>runSelectLoop</code>函数等待客户端的请求。</li><li>进程创建时会<code>startViaZygote</code>函数，最终使用socket向zygote的socket发送创建进程的请求</li><li>zygote的socket server在收到客户端的请求后，会调用<code>processCommand</code>处理进程的创建请求</li><li>进程创建最终会调用native方法<code>nativeForkAndSpecialize</code>，在进程创建完毕之后，会调用<code>zygoteInit</code>方法，最终通过反射调用走到<strong>ActivityThread的main</strong>方法中<h3 id="2-4-Binder线程池的启动"><a href="#2-4-Binder线程池的启动" class="headerlink" title="2.4 Binder线程池的启动"></a>2.4 Binder线程池的启动</h3>上面我们讲到，在进程创建完毕之后，会调用<code>zygoteInit</code>方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">#ZygoteInit.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runnable <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">long</span>[] disabledCompatChanges,</span><br><span class="hljs-params">            String[] argv, ClassLoader classLoader)</span> &#123;<br>        ...<br>        ZygoteInit.nativeZygoteInit();<br>        <span class="hljs-keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, disabledCompatChanges, argv,<br>                classLoader);<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nativeZygoteInit</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure>上述JNI方法对应关系如下<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gMethods[] = &#123;<br>...<br>&#123;<span class="hljs-string">&quot;nativeInitNativeState&quot;</span>, <span class="hljs-string">&quot;(Z)V&quot;</span>,<br>(<span class="hljs-type">void</span>*)com_android_internal_os_Zygote_nativeInitNativeState&#125;,<br>...<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-built_in">com_android_internal_os_ZygoteInit_nativeZygoteInit</span>(JNIEnv* env, jobject clazz)<br>&#123;<br>    gCurRuntime-&gt;<span class="hljs-built_in">onZygoteInit</span>();<br>&#125;<br></code></pre></td></tr></table></figure>上面JNI方法的注册在Zygote进程创建时就已经完成了。<code>com_android_internal_os_ZygoteInit_nativeZygoteInit</code>方法最终会调用到<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">onZygoteInit</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>       sp&lt;ProcessState&gt; proc = ProcessState::<span class="hljs-built_in">self</span>();<br>       <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;App process: starting thread pool.\n&quot;</span>);<br>       proc-&gt;<span class="hljs-built_in">startThreadPool</span>();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-1-ProcessState的初始化"><a href="#2-4-1-ProcessState的初始化" class="headerlink" title="2.4.1 ProcessState的初始化"></a>2.4.1 ProcessState的初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">sp&lt;ProcessState&gt; <span class="hljs-title">ProcessState::self</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">init</span>(kDefaultDriver, <span class="hljs-literal">false</span> <span class="hljs-comment">/*requireDefault*/</span>);<br>&#125;<br><span class="hljs-function">sp&lt;ProcessState&gt; <span class="hljs-title">ProcessState::init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *driver, <span class="hljs-type">bool</span> requireDefault)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    std::<span class="hljs-built_in">call_once</span>(gProcessOnce, [&amp;]()&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">access</span>(driver, R_OK) == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;Binder driver %s is unavailable. Using /dev/binder instead.&quot;</span>, driver);<br>            driver = <span class="hljs-string">&quot;/dev/binder&quot;</span>;<br>        &#125;<br>        ...<br>        std::lock_guard&lt;std::mutex&gt; <span class="hljs-built_in">l</span>(gProcessMutex);<br>        gProcess = sp&lt;ProcessState&gt;::<span class="hljs-built_in">make</span>(driver);<br>    &#125;);<br>    ...<br>    <span class="hljs-keyword">return</span> gProcess;<br>&#125;<br><br>ProcessState::<span class="hljs-built_in">ProcessState</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* driver)<br>      : <span class="hljs-built_in">mDriverName</span>(<span class="hljs-built_in">String8</span>(driver)),<br>        <span class="hljs-built_in">mDriverFD</span>(<span class="hljs-number">-1</span>),<br>        <span class="hljs-built_in">mVMStart</span>(MAP_FAILED),<br>        <span class="hljs-built_in">mThreadCountLock</span>(PTHREAD_MUTEX_INITIALIZER),<br>        <span class="hljs-built_in">mThreadCountDecrement</span>(PTHREAD_COND_INITIALIZER),<br>        <span class="hljs-built_in">mExecutingThreadsCount</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-built_in">mWaitingForThreads</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-built_in">mMaxThreads</span>(DEFAULT_MAX_BINDER_THREADS),<br>        <span class="hljs-built_in">mStarvationStartTimeMs</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-built_in">mForked</span>(<span class="hljs-literal">false</span>),<br>        <span class="hljs-built_in">mThreadPoolStarted</span>(<span class="hljs-literal">false</span>),<br>        <span class="hljs-built_in">mThreadPoolSeq</span>(<span class="hljs-number">1</span>),<br>        <span class="hljs-built_in">mCallRestriction</span>(CallRestriction::NONE) &#123;<br>    ...<br>    base::Result&lt;<span class="hljs-type">int</span>&gt; opened = <span class="hljs-built_in">open_driver</span>(driver);<br><br>    <span class="hljs-keyword">if</span> (opened.<span class="hljs-built_in">ok</span>()) &#123;<br>        <span class="hljs-comment">// mmap the binder, providing a chunk of virtual address space to receive transactions.</span><br>        mVMStart = <span class="hljs-built_in">mmap</span>(<span class="hljs-literal">nullptr</span>, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE,<br>        ...<br>    &#125;<br>   ...<br>    <span class="hljs-keyword">if</span> (opened.<span class="hljs-built_in">ok</span>()) &#123;<br>        mDriverFD = opened.<span class="hljs-built_in">value</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>在ProcessState的构造函数中，会首先调用<code>open_driver</code>获取binder驱动的文件句柄，然后使用<code>mmap</code>函数进行内存地址映射。<code>mmap</code>函数最终会调用到<code>binder_mmap</code>。binder_map函数会将<strong>一块物理地址同时映射到biner驱动的内核空间地址和进程的用户空间地址（所谓的映射就是建立页表的过程）</strong>，这样调用放只需要将数据拷贝到目标进程binder驱动映射的内核空间，目标进程就可以直接访问当传输的数据了。当然具体的流程是很复杂的，这里先按下不表<br><img src="/2022/04/17/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E5%AD%A6%E4%B9%A0Binder%E9%80%9A%E4%BF%A1-Binder%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/mmap%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84.png" alt="mmap地址映射"><h4 id="2-4-2-ProcessState的startThreadPool"><a href="#2-4-2-ProcessState的startThreadPool" class="headerlink" title="2.4.2 ProcessState的startThreadPool"></a>2.4.2 ProcessState的startThreadPool</h4>ProcessState在初始化完成之后，即调用mmap完成内存地址映射之后，就会调用<code>startThreadPool</code>启动binder线程池<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProcessState::startThreadPool</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   ...<br>   <span class="hljs-built_in">spawnPooledThread</span>(<span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProcessState::spawnPooledThread</span><span class="hljs-params">(<span class="hljs-type">bool</span> isMain)</span></span><br><span class="hljs-function"></span>&#123;       ...<br>        sp&lt;Thread&gt; t = sp&lt;PoolThread&gt;::<span class="hljs-built_in">make</span>(isMain);<br>        t-&gt;<span class="hljs-built_in">run</span>(name.<span class="hljs-built_in">string</span>());<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure>ProcessState的<code>startThreadPool</code>最终会创建PoolThread对象，然后调用它的<code>threadLoop</code>方法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">threadLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>       IPCThreadState::<span class="hljs-built_in">self</span>()-&gt;<span class="hljs-built_in">joinThreadPool</span>(mIsMain);<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><code>threadLoop</code>会调用<strong>IPCThreadState的joinThreadPool</strong></li></ol><h4 id="2-4-3-IPCThreadState的joinThreadPool"><a href="#2-4-3-IPCThreadState的joinThreadPool" class="headerlink" title="2.4.3 IPCThreadState的joinThreadPool"></a>2.4.3 IPCThreadState的joinThreadPool</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IPCThreadState::joinThreadPool</span><span class="hljs-params">(<span class="hljs-type">bool</span> isMain)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">processPendingDerefs</span>();<br>        <span class="hljs-comment">// now get the next command to be processed, waiting if necessary</span><br>        result = <span class="hljs-built_in">getAndExecuteCommand</span>();<br>     ...<br>    &#125; <span class="hljs-keyword">while</span> (result != -ECONNREFUSED &amp;&amp; result != -EBADF);<br><br>    <span class="hljs-built_in">LOG_THREADPOOL</span>(<span class="hljs-string">&quot;**** THREAD %p (PID %d) IS LEAVING THE THREAD POOL err=%d\n&quot;</span>,<br>        (<span class="hljs-type">void</span>*)<span class="hljs-built_in">pthread_self</span>(), <span class="hljs-built_in">getpid</span>(), result);<br><br>    mOut.<span class="hljs-built_in">writeInt32</span>(BC_EXIT_LOOPER);<br>    mIsLooper = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">talkWithDriver</span>(<span class="hljs-literal">false</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在<code>joinThreadPool</code>函数中，会采用while循环等待binder请求，然后使用<code>getAndExecuteCommand</code>处理请求。自此，进程的binder线程池就算是启动完毕了，可以接受调用方的biner请求了。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>进程binder线程池的启动流程如下：</p><ol><li><p>zygote进程启动后创建本地的socket，然后调用<code>runSelectLoop</code>等待socket请求</p></li><li><p>触发进程的创建过程会调用<strong>Process.start</strong>方法最终使用socket通信向zygote进程发送进程创建请求</p></li><li><p>Zygote进程收到进程创建请求后，调用<code>nativeForkAndSpecialize</code>方法调用到native层，native层使用<code>fork()</code>函数创建出子进程</p></li><li><p>子进程创建完毕后，会调用<strong>ZygoteInit.zygoteInit</strong>方法，在此方法中会掉用native方法<code>nativeZygoteInit</code></p></li><li><p><code>nativeZygoteInit</code>方法会创建ProcessState对象，在该对象的构造方法中会跟binder驱动交互，创建进程的binder内核地址空间。然后调用IPCThreadState的<code>joinThreadPool</code>函数，通过while循环等到客户端的请求。<br>值得注意的是，Zygote进程也是使用while循环等待请求，binder线程池也是使用while循环等待请求，不同的是Zygote进程使用的是本地socket。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自顶向下学习Binder通信——BinderProxy创建</title>
    <link href="/2022/04/03/Hello%20World/"/>
    <url>/2022/04/03/Hello%20World/</url>
    
    <content type="html"><![CDATA[<p>本文更适合对Binder通信机制有一定了解的开发人员阅读。<br>AIDL通信的一般流程：</p><ol><li>使用AMS的bindService绑定Service</li><li>在ServiceConnection的onServiceConnected的回调中使用IXxxx.Stub.asInterface()保存返回的IBinder类型对象</li><li>使用步骤2中保存的对象进行方法的调用<br>其中步骤2中返回的IBinder类型对象就是<code>BinderProxy</code>对象，本文介绍一下BinderProxy对象的创建过程<h2 id="ActivityThread的handleBindService方法"><a href="#ActivityThread的handleBindService方法" class="headerlink" title="ActivityThread的handleBindService方法"></a>ActivityThread的handleBindService方法</h2>在Client调用<code>bindService</code>方法后，最终会走到ActivityThread的<code>handleBindService</code>中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBindService</span><span class="hljs-params">(BindServiceData data)</span> &#123;<br>         ...<br>         <span class="hljs-comment">//省略不关心的代码逻辑</span><br>         <span class="hljs-type">IBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> s.onBind(data.intent);<br>        ActivityManager.getService().publishService(data.token, data.intent, binder);<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述函数做了两个动作：</p><ol><li><p>回调Service的<code>OnBind</code>方法（首次绑定) </p></li><li><p>调用AMS的<code>publishService</code>方法。<br> Service的<code>onBind</code>方法返回的是自定义的ServiceImpl对象，而且查阅<code>publishService</code>的代码逻辑也没有任何地方创建<code>BinderProxy</code>，所以<code>BinderProxy</code>不是上述两个函数中创建的。那么<code>BinderProxy</code>对象是何时创建的呢？<br> 其实，最关键的是<strong>ActivityManager.getService().publishService，它并不是直接调用的ActivityManagerService的publishService方法，不能直接去ActivityManagerService的源码里查看用逻辑</strong>，它本身就是一个Binder调用。</p></li></ol><h2 id="IActivityManager-java"><a href="#IActivityManager-java" class="headerlink" title="IActivityManager.java"></a>IActivityManager.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> android.app;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IActivityManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">android</span>.os.IInterface &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">android</span>.os.Binder <span class="hljs-keyword">implements</span> <span class="hljs-title class_">android</span>.app.IActivityManager &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTransact</span><span class="hljs-params">(<span class="hljs-type">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="hljs-type">int</span> flags)</span> <span class="hljs-keyword">throws</span> android.os.RemoteException &#123;<br>            ...<br>            <span class="hljs-keyword">case</span> TRANSACTION_publishService:<br>                _arg2 = android.app.IActivityManager.Stub.asInterface(data.readStrongBinder());<br>                ...<br>               <span class="hljs-built_in">this</span>.publishService(_arg0, _arg1, _arg2);<br>                ...<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">android</span>.app.IActivityManager &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishService</span><span class="hljs-params">(android.os.IBinder token, android.content.Intent intent, android.os.IBinder service)</span> <span class="hljs-keyword">throws</span> android.os.RemoteException &#123;<br>                android.os.<span class="hljs-type">Parcel</span> <span class="hljs-variable">_data</span> <span class="hljs-operator">=</span> android.os.Parcel.obtain();<br>                android.os.<span class="hljs-type">Parcel</span> <span class="hljs-variable">_reply</span> <span class="hljs-operator">=</span> android.os.Parcel.obtain();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ...<br>                    _data.writeStrongBinder((service != <span class="hljs-literal">null</span>) ? (service.asBinder() : (<span class="hljs-literal">null</span>)));<br>                    mRemote.transact(code, _data, _reply, <span class="hljs-number">0</span>);<br>                    ...<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publishService</span><span class="hljs-params">(android.os.IBinder token, android.content.Intent intent, android.os.IBinder service)</span> <span class="hljs-keyword">throws</span> android.os.RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是根据IActivityManager.aidl文件，手动编写的IActivityManager.java文件，可能有真正的文件有一定的出入，但是关键步骤上的代码逻辑应该是没问题的。<br>从上面的代码中可以看到当调用<code>publishService</code>方法后，传入的IBinder类的service对象会被Parcel.java的<code>writeStrongBinder</code>方法进行转换</p><h2 id="Java层Parcel的writeStrongBinder"><a href="#Java层Parcel的writeStrongBinder" class="headerlink" title="Java层Parcel的writeStrongBinder"></a>Java层Parcel的writeStrongBinder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeStrongBinder</span><span class="hljs-params">(IBinder val)</span> &#123;<br>       nativeWriteStrongBinder(mNativePtr, val);<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nativeWriteStrongBinder</span><span class="hljs-params">(<span class="hljs-type">long</span> nativePtr, IBinder val)</span>;<br></code></pre></td></tr></table></figure><p><code>writeStrongBinder</code>方法会调用native方法<code>nativeWriteStrongBinder</code></p><h3 id="Native方法的映射关系"><a href="#Native方法的映射关系" class="headerlink" title="Native方法的映射关系"></a>Native方法的映射关系</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gParcelMethods[] = &#123;<br>...<br>&#123;<span class="hljs-string">&quot;nativeWriteStrongBinder&quot;</span>,   <span class="hljs-string">&quot;(JLandroid/os/IBinder;)V&quot;</span>, (<span class="hljs-type">void</span>*)android_os_Parcel_writeStrongBinder&#125;,<br>...<br>            &#123;<span class="hljs-string">&quot;nativeReadStrongBinder&quot;</span>,    <span class="hljs-string">&quot;(J)Landroid/os/IBinder;&quot;</span>, (<span class="hljs-type">void</span>*)android_os_Parcel_readStrongBinder&#125;,<br>       ...<br>&#125;<br></code></pre></td></tr></table></figure><p>JNI方法的注册在Zygote进程启动是已经完成了，调用顺序如下：AndroidRuntime.start-&gt;AndroidRuntime.startReg-&gt;AndroidRuntime.register_jni_procs。感兴趣的可以细看，这里先按下不表</p><h3 id="Native层Parcel的android-os-Parcel-writeStrongBinder"><a href="#Native层Parcel的android-os-Parcel-writeStrongBinder" class="headerlink" title="Native层Parcel的android_os_Parcel_writeStrongBinder"></a>Native层Parcel的android_os_Parcel_writeStrongBinder</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">android_os_Parcel_writeStrongBinder</span><span class="hljs-params">(JNIEnv* env, jclass clazz, jlong nativePtr, jobject object)</span></span><br><span class="hljs-function"></span>&#123;<br>    Parcel* parcel = <span class="hljs-built_in">reinterpret_cast</span>&lt;Parcel*&gt;(nativePtr);<br>    <span class="hljs-keyword">if</span> (parcel != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">//关键在ibinderForJavaObject方法</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">status_t</span> err = parcel-&gt;<span class="hljs-built_in">writeStrongBinder</span>(<span class="hljs-built_in">ibinderForJavaObject</span>(env, object));<br>        <span class="hljs-keyword">if</span> (err != NO_ERROR) &#123;<br>            <span class="hljs-built_in">signalExceptionForError</span>(env, clazz, err);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Native层Binder的ibinderForJavaObject"><a href="#Native层Binder的ibinderForJavaObject" class="headerlink" title="Native层Binder的ibinderForJavaObject"></a>Native层Binder的ibinderForJavaObject</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">sp&lt;IBinder&gt; <span class="hljs-title">ibinderForJavaObject</span><span class="hljs-params">(JNIEnv* env, jobject obj)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// Instance of Binder?</span><br>    <span class="hljs-comment">// 判断是否是Binder对象吗？</span><br>    <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">IsInstanceOf</span>(obj, gBinderOffsets.mClass)) &#123;<br>        JavaBBinderHolder* jbh = (JavaBBinderHolder*)<br>            env-&gt;<span class="hljs-built_in">GetLongField</span>(obj, gBinderOffsets.mObject);<br>        <span class="hljs-keyword">return</span> jbh-&gt;<span class="hljs-built_in">get</span>(env, obj);<br>    &#125;<br>    <span class="hljs-comment">// Instance of BinderProxy?</span><br>    <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">IsInstanceOf</span>(obj, gBinderProxyOffsets.mClass)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getBPNativeData</span>(env, obj)-&gt;mObject;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从注释来看，会判断传入的参数是<code>Binder</code>对象还是<code>BinderProxy</code>对象。obj对象是我们自定义的类，一般继承了Ixxx.Stub类，而Stub类继承了Binder类，所以obj是Binder对象。但是这个gBinderOffsets.mClass代表啥？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> kBinderPathName = <span class="hljs-string">&quot;android/os/Binder&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">int_register_android_os_Binder</span><span class="hljs-params">(JNIEnv* env)</span></span><br><span class="hljs-function"></span>&#123;<br>    jclass clazz = <span class="hljs-built_in">FindClassOrDie</span>(env, kBinderPathName);<br>   <span class="hljs-comment">// mClass指向的确实是android.os.Binder对象</span><br>    gBinderOffsets.mClass = <span class="hljs-built_in">MakeGlobalRefOrDie</span>(env, clazz);<br>    gBinderOffsets.mExecTransact = <span class="hljs-built_in">GetMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;execTransact&quot;</span>, <span class="hljs-string">&quot;(IJJI)Z&quot;</span>);<br>    gBinderOffsets.mGetInterfaceDescriptor = <span class="hljs-built_in">GetMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;getInterfaceDescriptor&quot;</span>,<br>        <span class="hljs-string">&quot;()Ljava/lang/String;&quot;</span>);<br>    gBinderOffsets.mObject = <span class="hljs-built_in">GetFieldIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;mObject&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">RegisterMethodsOrDie</span>(<br>        env, kBinderPathName,<br>        gBinderMethods, <span class="hljs-built_in">NELEM</span>(gBinderMethods));<br>&#125;<br></code></pre></td></tr></table></figure><p>mClass确实指向的是Java层的<code>Binder</code>对象,那么代码会走一个逻辑分支， JavaBBinderHolder* jbh = (JavaBBinderHolder*) env-&gt;GetLongField(obj, gBinderOffsets.mObject),讲Binder对象的mObject强转为<code>JavaBBinderHolder</code>对象，那么Java层Binder的mObject是<code>JavaBBinderHolder</code>对象吗？</p><h4 id="Java层Binder的构造方法"><a href="#Java层Binder的构造方法" class="headerlink" title="Java层Binder的构造方法"></a>Java层Binder的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Binder</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String descriptor)</span> &#123;<br>       mObject = getNativeBBinderHolder();<br>       ...<br>   &#125;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getNativeBBinderHolder</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>在Service的onBind中需要返回自定义ServiceImpl对象，此时会调用父类的构造方法，一直调用到Binder的构造方法中，从上述的代码逻辑可以看出Binder的mObject指向的是native方法<code>getNativeBBinderHolder</code>的返回值</p><h4 id="Binder的android-os-Binder-getNativeBBinderHolder"><a href="#Binder的android-os-Binder-getNativeBBinderHolder" class="headerlink" title="Binder的android_os_Binder_getNativeBBinderHolder"></a>Binder的android_os_Binder_getNativeBBinderHolder</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> jlong <span class="hljs-title">android_os_Binder_getNativeBBinderHolder</span><span class="hljs-params">(JNIEnv* env, jobject clazz)</span></span><br><span class="hljs-function"></span>&#123;<br>    JavaBBinderHolder* jbh = <span class="hljs-keyword">new</span> <span class="hljs-built_in">JavaBBinderHolder</span>();<br>    <span class="hljs-keyword">return</span> (jlong) jbh;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的逻辑可以看出，mObject确实指向的是JavaBBinderHolder对象。</p><h3 id="JavaBBinderHolder的get"><a href="#JavaBBinderHolder的get" class="headerlink" title="JavaBBinderHolder的get"></a>JavaBBinderHolder的get</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">sp&lt;JavaBBinder&gt; <span class="hljs-title">get</span><span class="hljs-params">(JNIEnv* env, jobject obj)</span></span><br><span class="hljs-function"> </span>&#123;<br>     AutoMutex _l(mLock);<br>     sp&lt;JavaBBinder&gt; b = mBinder.<span class="hljs-built_in">promote</span>();<br>     <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">NULL</span>) &#123;<br>         b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">JavaBBinder</span>(env, obj);<br>         ...<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> b;<br> &#125;<br></code></pre></td></tr></table></figure><p>从上面可以看出来，JavaBBinderHolder的get方法返回的是跟<strong>JavaBBinder</strong>对象相关的对象。</p><p>从目前来看，<code>BinderProxy</code>对象还是未创建。从调用<code>publishService</code>到与binder驱动这块的逻辑中不涉及<code>BinderProxy</code>对象的创建。在将数据写到binder驱动的内核内存地址后,binder驱动会唤醒目标进程,然后经过一些列的函数调用最终调用到我们IActivityManager.java的<code>onTransact</code>方法中(binder驱动交互的整个流程太长，这里先按下不表)，然后调用<code>data.readStrongBinder</code>方法</p><h2 id="Java层Parcel的readStrongBinder"><a href="#Java层Parcel的readStrongBinder" class="headerlink" title="Java层Parcel的readStrongBinder"></a>Java层Parcel的readStrongBinder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> IBinder <span class="hljs-title function_">readStrongBinder</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> nativeReadStrongBinder(mNativePtr);<br>     ...<br>     <span class="hljs-keyword">return</span> result;<br> &#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> IBinder <span class="hljs-title function_">nativeReadStrongBinder</span><span class="hljs-params">(<span class="hljs-type">long</span> nativePtr)</span>;<br></code></pre></td></tr></table></figure><h3 id="Native层Parcel的android-os-Parcel-readStrongBinder"><a href="#Native层Parcel的android-os-Parcel-readStrongBinder" class="headerlink" title="Native层Parcel的android_os_Parcel_readStrongBinder"></a>Native层Parcel的android_os_Parcel_readStrongBinder</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> jobject <span class="hljs-title">android_os_Parcel_readStrongBinder</span><span class="hljs-params">(JNIEnv* env, jclass clazz, jlong nativePtr)</span></span><br><span class="hljs-function"></span>&#123;<br>    Parcel* parcel = <span class="hljs-built_in">reinterpret_cast</span>&lt;Parcel*&gt;(nativePtr);<br>    <span class="hljs-keyword">if</span> (parcel != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">javaObjectForIBinder</span>(env, parcel-&gt;<span class="hljs-built_in">readStrongBinder</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Native层Binder的javaObjectForIBinder"><a href="#Native层Binder的javaObjectForIBinder" class="headerlink" title="Native层Binder的javaObjectForIBinder"></a>Native层Binder的javaObjectForIBinder</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">jobject <span class="hljs-title">javaObjectForIBinder</span><span class="hljs-params">(JNIEnv* env, <span class="hljs-type">const</span> sp&lt;IBinder&gt;&amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>    BinderProxyNativeData* nativeData = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BinderProxyNativeData</span>();<br>    nativeData-&gt;mOrgue = <span class="hljs-keyword">new</span> DeathRecipientList;<br>    nativeData-&gt;mObject = val;<br>    ...<br>    jobject object = env-&gt;<span class="hljs-built_in">CallStaticObjectMethod</span>(gBinderProxyOffsets.mClass,<br>            gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.<span class="hljs-built_in">get</span>());<br>    ...<br>   <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="int-register-android-os-BinderProxy"><a href="#int-register-android-os-BinderProxy" class="headerlink" title="int_register_android_os_BinderProxy"></a>int_register_android_os_BinderProxy</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> kBinderProxyPathName = <span class="hljs-string">&quot;android/os/BinderProxy&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">int_register_android_os_BinderProxy</span><span class="hljs-params">(JNIEnv* env)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    jclass clazz = <span class="hljs-built_in">FindClassOrDie</span>(env, kBinderProxyPathName);<br>    gBinderProxyOffsets.mClass = <span class="hljs-built_in">MakeGlobalRefOrDie</span>(env, clazz);<br>    gBinderProxyOffsets.mGetInstance = <span class="hljs-built_in">GetStaticMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;getInstance&quot;</span>,<br>            <span class="hljs-string">&quot;(JJ)Landroid/os/BinderProxy;&quot;</span>);<br>    gBinderProxyOffsets.mSendDeathNotice =<br>            <span class="hljs-built_in">GetStaticMethodIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;sendDeathNotice&quot;</span>,<br>                                   <span class="hljs-string">&quot;(Landroid/os/IBinder$DeathRecipient;Landroid/os/IBinder;)V&quot;</span>);<br>    gBinderProxyOffsets.mNativeData = <span class="hljs-built_in">GetFieldIDOrDie</span>(env, clazz, <span class="hljs-string">&quot;mNativeData&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>);<br>   ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">RegisterMethodsOrDie</span>(<br>        env, kBinderProxyPathName,<br>        gBinderProxyMethods, <span class="hljs-built_in">NELEM</span>(gBinderProxyMethods));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以<code>javaObjectForIBinder</code>最终会调用Java层<code>BinderProxy</code>的<code>getInstance</code>方法</p><h2 id="BinderProxy的getInstance"><a href="#BinderProxy的getInstance" class="headerlink" title="BinderProxy的getInstance"></a>BinderProxy的getInstance</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BinderProxy <span class="hljs-title function_">getInstance</span><span class="hljs-params">(<span class="hljs-type">long</span> nativeData, <span class="hljs-type">long</span> iBinder)</span> &#123;<br>    BinderProxy result;<br>    <span class="hljs-keyword">synchronized</span> (sProxyMap) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = sProxyMap.get(iBinder);<br>            <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinderProxy</span>(nativeData);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>     ...<br>        &#125;<br>        NoImagePreloadHolder.sRegistry.registerNativeAllocation(result, nativeData);<br>        sProxyMap.set(iBinder, result);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>至此，<code>BinderProxy</code>对象才被真正创建出来,然后回调到AMS的publishService方法中，最终回调给调用方ServiceConnection的<code>onServiceConnected</code>方法。</p><p>简而言之，BinderProxy对象的创建是在<code>readStrongBinder</code>的方法中创建的。最后我们看一下整个过程的函数调用关系<br><img src="/2022/04/03/Hello%20World/BinderProxy%E5%88%9B%E5%BB%BA.png" alt="BinderProxy创建"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
